#!/bin/bash
# Skript generuje animaci grafu ze zadanych dat


#I tested with this option on, maybe not needed, included to be sure
shopt -s extglob
#numeric sorting nondependent on locale
export LC_ALL=C

#usage
USAGE=()
USAGE+=("Usage:  $0 [-v] [-e modulo=int:type=1-200] [-S float/int] [-t strftime] [-T int/float] [-n string] [-o string] [-y int/float/auto/min/max] [-Y int/float/auto/min/max] [-f path to config] data...")
USAGE+=("        $0 [-h]")
USAGE+=("           ")
USAGE+=("           -v  verbose")
USAGE+=("           -e  parametres of dots effect")
USAGE+=("           -S  speed of loading data")
USAGE+=("           -t  format of time in files")
USAGE+=("           -T  duration of the resulting animation")
USAGE+=("           -n  folder in which animation will be created")
USAGE+=("           -o  output name")
USAGE+=("           -y  ymin")
USAGE+=("           -Y  ymax")
USAGE+=("           -f  path to valid config file for directives see manual")
USAGE+=("           -h  this help")

#returncode is 1 until we reach the end
ECODE=1
#verbosity level
VERBOSE=0
#output suffix
OUTPUT=anim.mp4
#effect modulo
DOTS=10
#dot type 1-200
TYPE=1
#input reading speed, may be float
SPEED=1
#timeformat
TIMEFORMAT='[%Y/%m/%d %H:%M:%S]'
#duration
TIME=''
YMIN=auto
YMAX=auto
#name of output directory
NAME=dots
# Functions described well in prog. documentation

function verbose { ((VERBOSE)) && printf "$0[debug]: %s\n" "$@" >&2; }
function vverbose { ((VERBOSE>1)) && printf "$0[debug]: %s\n" "$@" >&2; }
function err { printf "$0[error]: %s\n" "$@" >&2; exit; }
function test_arg {
	[ -n "$1" ] || err "Empty argument"
	[ -f "$1" ] || err "Argument '$1' is not a file"
	[ -r "$1" ] || err "Data file '$1' is not readable"
	[ -s "$1" ] || err "Data file '$1' is empty"
	#test if last field (value) is in correct format
	awk -F " " '{print $NF}' "$1" | egrep -v '^-?([0-9]+|[0-9]*\.[0-9]+)$' && err "Bad data format in '$1'"
    #check dates using a perl script and output them in epoch format for a further inspection
    awk '{$NF=""; print $0}' "$1" | "$(dirname "$0")"/datestd.pl "$TIMEFORMAT" >"${TMP}/epoch" 2>/dev/null || err "Date in $1 is not in correct format"
#inspect if the order is right
local epoch
local k
k=1
epoch=0
while read line; do
  if [ "$k" -ne 1 ]; then
  	[[ "$epoch" -le "$line" ]] || err "Xticks in $1 are not continuous line $k";
  fi
  epoch="$line"
  k=$((k+1))
done <"${TMP}/epoch"
    verbose "Argument $1 checked!"

}

function validate_params {


#check parametres using some superior regular expressions 

[[ "$DOTS" =~ ^[0-9]+$ ]] || err "modulo supplied via -e is not an integer"
[[ "$TYPE" =~ ^[0-9]+$ ]] || err "type supplied via -e is not an integer"
[[ "$TYPE" -ge 1 ]] || err "type supplied via -e is smaller than 1"
[[ "$TYPE" -le 200 ]] || err "type supplied via -e is bigger than 200"
[[ "$SPEED" =~ ^[0-9]+\.*[0-9]*$ ]] || err "speed must be either integer or a float number"
[[ "$SPEED" =~ ^0\.*0*$ ]] && err "speed cannot be 0"

# how to validate timeformat TIMEFORMAT='[%Y/%m/%d %H:%M:%S]'
[[ "$TIME" =~ ((^[0-9]+\.*[0-9]*$)|(^$)) ]] || err "time must be either integer or a float number"
[[ "$YMIN" =~ ((^auto$)|(^min$)|(^-*[0-9]+\.*[0-9]*$)) ]] || err "ymin must be either integer, float number, min, max or auto"
[[ "$YMAX" =~ ((^auto$)|(^max$)|(^-*[0-9]+\.*[0-9]*$)) ]] || err "ymax must be either integer, float number,min, max or auto"


}

function preq {
#check prequisites
type ffmpeg >/dev/null || err "It seems like ffmpeg is not installed"
type gnuplot >/dev/null || err "It seems like gnuplot is not installed"
type perldoc >/dev/null || err "It seems like perldoc is not installed"
perldoc -l DateTime::Format::Strptime >/dev/null || err "Seems like perl module DateTime::Format:Strptime is not installed"

}

function max_folder {
  max=0
  for file in *
  do
    temp=$(echo "$file" | grep -E "^$1_[0-9]+$" | sed "s/${1}_//")
    [[ -d $file  ]] && [[ $max -lt $temp ]] && max=$temp
  done
  max="$((max + 1))"
  mkdir "${1}_${max}" 2>/dev/null || err "Could not create folder ${1}_${max}"
  NAME="${1}_${max}"
}
function process_arg {

    verbose "Processing: $1"
        test_arg "$1"
        #maybe could a problem to do this when using absolute path
    FIRSTDATE="$(head -n1 "$1" | sed 's/ [^\ ]*$//')"
        #check return code
        epoch="$("$(dirname "$0")"/dates.pl "$TIMEFORMAT" "$FIRSTDATE")" || err "Date on first line of $arg is not in correct format"
        echo "$epoch" "$1">>"${TMP}/unsorted"
}

function load_config {

verbose "loading config from $1"
    [ -n "$1" ] || err "Empty config argument"
    [ -f "$1" ] || err "Config '$1' is not a file"
    [ -r "$1" ] || err "Config file '$1' is not readable"
    [ -s "$1" ] || err "Config file '$1' is empty"
#check if only valid directives are used
directives_regex='((^TIMEFORMAT=)|(^YMAX=)|(^YMIN=)|(^SPEED=)|(^TIME=)|(^EFFECTPARAMS=)|(^NAME=))'
grep -v '^#' "$1" | grep -v '^\s*$' | sed -E 's/[[:space:]]+/ /' | sed 's/#.*$//' | awk '{print toupper($1)"="$2}'>"${TMP}/config"
grep -v -E "$directives_regex" "${TMP}/config" && err " preceding unrecognized directives used in config"
source "${TMP}/config"
verbose "config from $1 loaded"
}

function parse_eparams {
#parse eparams separated by :
TMPDOTS="$( echo "$1" | sed 's/:/\n/g' | grep -E -m 1 '^modulo=[0-9]+$' | cut -d'=' -f2 )"
TMPTYPE="$( echo "$1" | sed 's/:/\n/g' | grep -E -m 1 '^type=[0-9]{1,3}$' | cut -d'=' -f2 )"
if [[ -z "$TMPDOTS" ]]; then
:
else
DOTS="$TMPDOTS"
fi    

if [[ -z "$TMPTYPE" ]]; then
:
else
TYPE="$TMPTYPE"
fi

if [[ -z "$TMPDOTS" ]] && [[ -z "$TMPTYPE" ]]; then
err "-e must follow format key=val:key1=val1 and keys modulo and type can only be used"
fi

}

function video {

	DATA=$1
        verbose "Using modulo $DOTS for points"
	#create file with dots using awk and row numbers
	awk -v DTCOUNT="$DOTS" 'NR%DTCOUNT==0 {print $0}' "$1">"${TMP}/dots"

	# Limity podle datoveho souboru
	LINES=$(wc -l <"$DATA")
	[[ "$LINES" -le "$DOTS" ]] && err "modulo must be smaller than line count of merged files"
	verbose "$1 has $LINES lines"
        #ymin ymax dle parametru
        if [ "$YMIN" = auto ]; then
	TMPYMIN=$( awk -F " " '{print $NF}' "$DATA" | sort -n | sed -n '1p')
        elif [ "$YMIN" = min ]; then
        TMPYMIN=$( awk -F " " '{print $NF}' "$DATA" | sort -n | sed -n '1p')
        else
        TMPYMIN="$YMIN"
        fi

        if [ "$YMAX" = auto ]; then
        TMPYMAX=$( awk -F " " '{print $NF}' "$DATA" | sort -n | sed -n '$p')
        elif [ "$YMAX" = max ]; then
        TMPYMAX=$( awk -F " " '{print $NF}' "$DATA" | sort -n | sed -n '$p')
        else
        TMPYMAX="$YMAX"
        fi

	YRANGE="${TMPYMIN}:${TMPYMAX}"
	verbose "$1 has $YRANGE range"
	
    TMPXMIN=$(  head -n1 "${DATA}" | sed -E 's/ [^ ]+$//' )
    TMPXMAX=$(  tail -n1 "${DATA}" | sed -E 's/ [^ ]+$//' )
    XRANGE="\"${TMPXMIN}\":\"${TMPXMAX}\""
    FMT="$TMP/%0${#LINES}d.png"
	verbose "tmp file FMT set to $FMT"
        verbose "timeformat set to $TIMEFORMAT"
        verbose "speed set to $SPEED"
        verbose "point type is $TYPE"	
        # Vygenerovat snimky animace
        local i
        local k
        local float
        i=1
        k=1
        float=1
    #count spaces, gnuplot uses them as separator
    formatspaces=$(echo $TIMEFORMAT | tr -cd ' ' | wc -c)
    #calculate gnuplot offset with respect to number of spaces in separator
    sepoffset=$(( $formatspaces + 2 ))
	while [ $i -le "$LINES" ]
	do
		{
			cat <<-PLOT
				set terminal png
                                set timefmt "$TIMEFORMAT"
				set xdata time
                                set yrange [$YRANGE]
                                set xrange [$XRANGE]
                                set format x"$TIMEFORMAT"
                                set xtics rotate by -45
                                set rmargin 15
                                set grid
                                set output "$(printf "$FMT" $k)"
				plot '-' using 1:$sepoffset with lines t '', "${TMP}/dots" using 1:$sepoffset w p pt ${TYPE} t '' 
				PLOT
			head -n $i "$DATA"
		} | gnuplot || err "Something went wrong with gnuplot"
		((p=100*i/LINES,p%10==0?first:(first=1,0))) && { vverbose "Done: $p%"; first=0; }
	        float=$(echo "$float+$SPEED" | bc)
                i=$(echo "$float/1" | bc)
                k=$((k+1))
        done
        verbose "GNUPLOT done, ffmpeg comes into play"
	#vytvorit slozku pro vystup
        mkdir $NAME 2>/dev/null || max_folder "$NAME"
     # Spojit snimky do videa   
	if [[ -z "$TIME" ]]; then
        ffmpeg -y -i "$FMT" -- "${PWD}/${NAME}/${OUTPUT}" >/dev/null 2>/dev/null
        else
        FPS=$(echo "($LINES)/($TIME*$SPEED)" | bc -l)
        verbose "Calculated FPS based on speed and time is $FPS"
        ffmpeg -framerate "$FPS" -y -i "$FMT" -- "${PWD}/${NAME}/${OUTPUT}" >/dev/null 2>/dev/null || err "Something went wrong with ffmpeg"
        fi
	verbose "Animation is ready ${PWD}/${NAME}/${OUTPUT}"

}


##############################

#check prequisites
preq
# options
OPTSTRING='vho:e:t:S:T:y:Y:n:f:'

declare -A used

# creating a temp dir
TMP=$(mktemp -d) || { echo "Cannot create temporary directory" >&2; exit 1; }
trap 'rm -rf "$TMP"; exit $ECODE' EXIT

#looking for config first
while getopts "$OPTSTRING" opt
do
	case $opt in
	    f) 
           if [[ "${used[f]}" != 1 ]]; then
           used[f]=1
           CONFIG="$OPTARG" 
           load_config "$CONFIG"
           else
           err "-f used more than once "	
           fi;;
        \?) :;
	esac
done
OPTIND=1
#now load other options overwriting the ones loaded from config
while getopts "$OPTSTRING" opt
do
    case $opt in
        v) ((VERBOSE++));;
        h) printf "%s\n" "$USAGE"; ECODE=0; exit ;;
        o) if [[ "${used[o]}" != 1 ]]; then
           used[o]=1
           OUTPUT="$OPTARG"
           else
           err "-o used more than once "	
           fi;;
        e) EFFECTPARAMS="$OPTARG"; parse_eparams "$EFFECTPARAMS";;
        t) if [[ "${used[t]}" != 1 ]]; then
           used[t]=1
           TIMEFORMAT="$OPTARG"
           else
           err "-t used more than once "	
           fi;;
        S) if [[ "${used[S]}" != 1 ]]; then
           used[S]=1
           SPEED="$OPTARG"
           else
           err "-S used more than once "	
           fi;;        
        T) if [[ "${used[T]}" != 1 ]]; then
           used[T]=1
           TIME="$OPTARG"
           else
           err "-T used more than once "	
           fi;;  
        y) if [[ "${used[y]}" != 1 ]]; then
           used[y]=1
           YMIN="$OPTARG"
           else
           err "-y used more than once "	
           fi;; 
        Y) if [[ "${used[Y]}" != 1 ]]; then
           used[Y]=1
           YMAX="$OPTARG"
           else
           err "-Y used more than once "	
           fi;; 
        n) if [[ "${used[n]}" != 1 ]]; then
           used[n]=1
           NAME="$OPTARG"
           else
           err "-n used more than once "	
           fi;; 
        \?) err "$USAGE";
    esac
done
shift $((OPTIND-1))

#validate loaded parametres
validate_params

verbose "Temp dir: $TMP"

EXT=${OUTPUT#*.}
[[ "$EXT" =~ ^mp4$ ]] || err 'output suffix must be mp4'
verbose "output name is $OUTPUT"

#at least one argument must be supplied
[ $# -ge 1 ] || err "Arguments missing" "${USAGE[@]}"


#loop all arguments
for arg
do

if [[ "$arg" =~ ^http ]]; then
verbose "Downloading $arg"
wget --quiet -O - "$arg" > "${TMP}/download" || err "Download of $arg failed"
process_arg "${TMP}/download";
else
process_arg "$arg";
fi

done
#sort the files based on the first line
sort -n "${TMP}/unsorted" >"${TMP}/sorted"


verbose "Merging input files"
#merge the files based on file sorted, as order of lines is checked files cannot overlap
while read line; do
  filename=$(echo "$line" | awk '{print $NF}')
  cat "$filename">>"${TMP}/merge"
done <"${TMP}/sorted"

verbose "Files merged in  ${TMP}/merge ${#}"


video "${TMP}/merge"
verbose "Job is done!"
ECODE=0
