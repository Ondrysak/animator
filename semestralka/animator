#!/bin/bash
# Script generating animation from input data


#I tested with this option on, maybe not needed, included to be sure
shopt -s extglob
#numeric sorting nondependent on locale
export LC_ALL=C

#usage
USAGE=()
USAGE+=("Usage:  $0 [-v] [-e modulo=int:type=1-200] [-S float/int] [-t strftime] [-T int/float] [-n string] [-o string] [-y int/float/auto/min/max] [-Y int/float/auto/min/max] [-f path to config] data...")
USAGE+=("        $0 [-h]")
USAGE+=("           ")
USAGE+=("           -v  verbose")
USAGE+=("           -e  parametres of dots effect")
USAGE+=("           -S  speed of loading data")
USAGE+=("           -t  format of time in files")
USAGE+=("           -T  duration of the resulting animation")
USAGE+=("           -n  folder in which animation will be created")
USAGE+=("           -y  ymin")
USAGE+=("           -Y  ymax")
USAGE+=("           -f  path to valid config file for directives see manual")
USAGE+=("           -h  this help")

#returncode is 1 until we reach the end
ECODE=1
#verbosity level
VERBOSE=0
#output suffix, undocumented -o can be used to change this, its not tested very well 
OUTPUT=anim.mp4
#effect modulo
DOTS=10
#dot type 1-200
TYPE=1
#input reading speed, may be float
SPEED=1
#timeformat
TIMEFORMAT='[%Y/%m/%d %H:%M:%S]'
FORMATREGEX=''
#duration
TIME=''
YMIN=auto
YMAX=auto
#name of output directory
NAME=dots
TMPFILE=tmp
# Functions described well in prog. documentation

function verbose { ((VERBOSE)) && printf "$0[debug]: %s\n" "$@" >&2; }
function vverbose { ((VERBOSE>1)) && printf "$0[debug]: %s\n" "$@" >&2; }
function err { printf "$0[error]: %s\n" "$@" >&2; exit; }
function test_arg {
	[ -n "$1" ] || err "Empty argument"
	[ -f "$1" ] || err "Argument '$1' is not a file"
	[ -r "$1" ] || err "Data file '$1' is not readable"
	[ -s "$1" ] || err "Data file '$1' is empty"
	#test if last field (value) is in correct format
	awk -F " " '{print $NF}' "$1" | egrep -v '^-?([0-9]+|[0-9]*\.[0-9]+)$' && err "Bad data format in $1, preceeding lines failed the validation"
  #sad
  awk '{$NF=""; print $0}' "$1" | sed 's/ $//' | egrep -v "$FORMATREGEX" && err "Basic regex check of dates failed in file $1, preceeding lines failed the validation"
  #check dates using a perl script and output them in epoch format for a further inspection, dirname substitution is used because we have not PWD guarateed
  awk '{$NF=""; print $0}' "$1" | sed 's/ $//' | "$(dirname $(readlink -f "$BASH_SOURCE"))"/datestd.pl "$TIMEFORMAT" >"${TMP}/epoch" 2>/dev/null || err "Date in $1 is not in correct format"
  #awk '{$NF=""; print $0}' "$1" | "$(dirname $(readlink -f "$BASH_SOURCE"))"/datestd.pl "$TIMEFORMAT" 
	#inspect if the order is right
	local epoch
	local k
	k=1
	epoch=0
	while read line; do
  		if [ "$k" -ne 1 ]; then
  			[[ "$epoch" -le "$line" ]] || err "Xticks in $1 are not continuous line $k";
  		fi
  		epoch="$line"
  		k=$((k+1))
	done <"${TMP}/epoch"
    verbose "Argument $1 checked!"

}

 
function format_regex {
#timeformat subsi
TIMEFORMAT="$(echo "$TIMEFORMAT" | sed -E -e 's#%x#%d.%m.%Y#' -e 's/%X/%H:%M:%S/'  )"
FORMATREGEX="$(echo "$TIMEFORMAT" | sed -E -e 's/\\/\\\\/g' -e 's/\^/\\^/g' -e 's/\$/\\$/g' -e 's/\{/\\{/g' -e 's/\}/\\}/g' -e 's/\[/\\[/g' -e 's/\]/\\]/g' -e 's/\(/\\(/g' -e 's/\)/\\)/g' -e 's/\./\\./g' -e 's/\*/\\*/g' -e 's/\+/\\+/g' -e 's/\&/\\&/g' )"
FORMATREGEX="$(echo "$FORMATREGEX" | sed -E -e 's#%x#%d.%m.%Y#' -e 's/%X/%H:%M:%S/'  )"
FORMATREGEX="$( echo "^${FORMATREGEX}$" | sed -E -e 's/%H/[0-9][0-9]/' -e 's/%M/[0-9][0-9]/' -e 's/%S/[0-9][0-9]/' -e 's/%Y/[0-9][0-9][0-9][0-9]/' -e 's/%y/[0-9][0-9]/' -e 's/%m/[0-9][0-9]/' -e 's/%d/[0-9][0-9]/' )"
verbose "regex used for the first check of the input is $FORMATREGEX"
}

function validate_params {

	local EXT
	#check parametres using some superior regular expressions 

	[[ "$DOTS" =~ ^[0-9]+$ ]] || err "modulo supplied via -e is not an integer"
	[[ "$TYPE" =~ ^[0-9]+$ ]] || err "type supplied via -e is not an integer"
	[[ "$TYPE" -ge 1 ]] || err "type supplied via -e is smaller than 1"
	[[ "$TYPE" -le 200 ]] || err "type supplied via -e is bigger than 200"
	[[ "$SPEED" =~ ^[0-9]+\.*[0-9]*$ ]] || err "speed must be either  positive integer or a positive float number"
	[[ "$SPEED" =~ ^0\.*0*$ ]] && err "speed cannot be 0"
  [[ -z "$NAME" ]] || [[ "$NAME" =~ \/ ]] && err "output folder name cannot be empty and cannot contain a slash"
  [[ -z "$TIMEFORMAT" ]] && err "Timeformat cannot be empty string"
	
	[[ "$TIME" =~ ((^[0-9]+\.*[0-9]*$)|(^$)) ]] || err "time must be either positive integer or a positive float number"
	[[ "$YMIN" =~ ((^auto$)|(^min$)|(^-*[0-9]+\.*[0-9]*$)) ]] || err "ymin must be either integer, float number, min, max or auto"
	[[ "$YMAX" =~ ((^auto$)|(^max$)|(^-*[0-9]+\.*[0-9]*$)) ]] || err "ymax must be either integer, float number,min, max or auto"
	EXT=${OUTPUT#*.}
	[[ "$EXT" =~ ^mp4$ ]] || err 'output suffix must be mp4'

}

function preq {
	#check prequisites
	type ffmpeg >/dev/null || err "It seems like ffmpeg is not installed"
	type gnuplot >/dev/null || err "It seems like gnuplot is not installed"
	type perldoc >/dev/null || err "It seems like perldoc is not installed"
	perldoc -l DateTime::Format::Strptime >/dev/null || err "Seems like perl module DateTime::Format:Strptime is not installed"

}

function max_folder {
  	local max
  	local temp
  	max=0
  	#find max folder suffix
  	for file in *
  	do
    	temp=$(echo "$file" | grep -E "^$1_[0-9]+$" | sed "s/${1}_//")
    	[[ $max -lt $temp ]] && max=$temp
  	done
  	#increment it by one
  	max="$((max + 1))"
  	mkdir "${1}_${max}" 2>/dev/null || err "Could not create folder ${1}_${max}"
  	#set new NAME using calculated suffix
  	NAME="${1}_${max}"
}

function max_file {
  	local max
  	local temp
  	#if tmp file exists find max file suffix
  	if [[ -f "${TMP}/${TMPFILE}" ]]; then
  		max=0
  		for file in "${TMP}"*
  		do
    		temp=$(echo "$file" | grep -E "^${TMPFILE}_[0-9]+$" | sed "s/${TMPFILE}_//")
    		[[ -f $file  ]] && [[ $max -lt $temp ]] && max=$temp
  		done
  		max="$((max + 1))"
  		#set new tmpfilename using calculated suffix
  		TMPFILE="${TMPFILE}_${max}";
  	fi
}
function process_arg {

    verbose "Processing: $1"
    test_arg "$1"
    #first and last date in variable using 
    firstdate="$(head -n1 "$1" | awk '{$NF=""; print $0}' | sed 's/ $//')"
    lastdate="$(tail -n1 "$1" | awk '{$NF=""; print $0}' | sed 's/ $//' )"
    local firstepoch
    local lastepoch

    #converting first and last date to epoch
    firstepoch="$("$(dirname $(readlink -f "$BASH_SOURCE"))"/dates.pl "$TIMEFORMAT" "$firstdate")" || err "Date on first line of $arg is not in correct format"
    lastepoch="$("$(dirname $(readlink -f "$BASH_SOURCE"))"/dates.pl "$TIMEFORMAT" "$lastdate")" || err "Date on last line of $arg is not in correct format"
    #file to be sorted later
    echo "$firstepoch" "$lastepoch" "$1">>"${TMP}/unsorted" || err "Something went wrong when processing arguments"

}

function load_config {
    #do some basic checks
	verbose "Loading config from $1"
	[ -n "$1" ] || err "Empty config argument"
	[ -f "$1" ] || err "Config '$1' is not a file"
	[ -r "$1" ] || err "Config file '$1' is not readable"
	[ -s "$1" ] || err "Config file '$1' is empty"
	#check if only valid directives are used
	directives_regex='((^TIMEFORMAT=)|(^YMAX=)|(^YMIN=)|(^SPEED=)|(^TIME=)|(^EFFECTPARAMS=)|(^NAME=))'
  #create sourcable file from the config
	grep -v '^#' "$1" | grep -v '^\s*$' | sed -E 's/[[:space:]]+/ /' | sed 's/#.*$//' | awk '{print toupper($1)"="$2}'>"${TMP}/config" || err "Something went wrong when processing config"
  [[ -f "${TMP}/config" ]] || err "Something went wrong when processing config"
	grep -v -E "$directives_regex" "${TMP}/config" && err " preceding unrecognized directives used in config"
	#directive effectparams can be present more than once and all must be applied
  grep '^EFFECTPARAMS' "${TMP}/config" > "${TMP}/eparams" 
  [[ -f "${TMP}/eparams" ]] || err "Something went wrong when processing config"
  #just in case, effect params was present with more keys 
  while read singleparam; do
    echo "$singleparam">"${TMP}/singleparam" || err "Something went wrong when loading config (singleparam creating) "
    source "${TMP}/singleparam" || err "Something went wrong when loading config (singleparam sourcing)."
    parse_eparams "$EFFECTPARAMS"
  done < "${TMP}/eparams"
  #source the file after validating it
	source "${TMP}/config" || err "Something went wrong when loading config (sourcing new stripped config)"
	verbose "Config from $1 loaded"
}

function parse_eparams {
  local tmptype
  local tmpdots
	#parse eparams separated by:
	tmpdots="$( echo "$1" | sed 's/:/\n/g' | grep -E -m 1 '^modulo=[0-9]+$' | cut -d'=' -f2 )"
	tmptype="$( echo "$1" | sed 's/:/\n/g' | grep -E -m 1 '^type=[0-9]{1,3}$' | cut -d'=' -f2 )"
	if [[ -z "$tmpdots" ]]; then
		:
	else
		DOTS="$tmpdots"
	fi    

	if [[ -z "$tmptype" ]]; then
		:
	else
		TYPE="$tmptype"
	fi
    #if no valid params are found than something must went wrong
	if [[ -z "$tmpdots" ]] && [[ -z "$tmptype" ]]; then
		err "-e must follow format key=val:key1=val1 and keys modulo and type can only be used"
	fi

}

function check_overlap {
	local n
	n=1
	while read line; do
  		firstepoch=$(echo "$line" | awk '{print $2}')
  		filename=$(echo "$line" | awk '{print $NF}')
  		if [[ "$n" -ne 1 ]]; then
  			[[ "$firstepoch" -le "$lastepoch" ]] && err "file $filename overlaps $lastfilename"
  		fi
  		lastfilename=$(echo "$line" | awk '{print $NF}')
  		lastepoch=$(echo "$line" | awk '{print $2}')
  		n=$((n+1))
	done <"${TMP}/sorted"

}

function merge_input {

	verbose "Merging input files in following order"
	#merge the files based on file sorted, as order of lines is checked files cannot overlap
	while read line; do
  		filename=$(echo "$line" | awk '{print $NF}')
      verbose "${filename}"
  		cat "$filename">>"${TMP}/merge" || err "Something went wrong when merging"
	done <"${TMP}/sorted"

	verbose "Files merged in  ${TMP}/merge $(cat ${TMP}/sorted | wc -l)"

}


function video {

	DATA=$1
    verbose "Using modulo $DOTS for points"
	#create file with dots using awk and row numbers
	awk -v DTCOUNT="$DOTS" 'NR%DTCOUNT==1 {print $0}' "$1">"${TMP}/dots" || err "Something went wrong when creating second dataset for gnuplot"

	# Limity podle datoveho souboru
	LINES=$(wc -l <"$DATA")
	[[ "$LINES" -le "$DOTS" ]] && err "modulo must be smaller than line count of merged files"
	verbose "$1 has $LINES lines"
    #ymin ymax dle parametru
    if [ "$YMIN" = auto ]; then
		tmpymin=$( awk -F " " '{print $NF}' "$DATA" | sort -n | sed -n '1p')
    elif [ "$YMIN" = min ]; then
        tmpymin=$( awk -F " " '{print $NF}' "$DATA" | sort -n | sed -n '1p')
    else
        tmpymin="$YMIN"
    fi

    if [ "$YMAX" = auto ]; then
        tmpymax=$( awk -F " " '{print $NF}' "$DATA" | sort -n | sed -n '$p')
    elif [ "$YMAX" = max ]; then
        tmpymax=$( awk -F " " '{print $NF}' "$DATA" | sort -n | sed -n '$p')
    else
        tmpymax="$YMAX"
    fi

	YRANGE="${tmpymin}:${tmpymax}"
	verbose "Yrange set to $YRANGE"
	  local framecount
    tmpxmin=$(  head -n1 "${DATA}" | sed -E 's/ [^ ]+$//' )
    tmpxmax=$(  tail -n1 "${DATA}" | sed -E 's/ [^ ]+$//' )
    XRANGE="\"${tmpxmin}\":\"${tmpxmax}\""
    verbose "$1 has $XRANGE xrange"
    #upper limit for any speed
    framecount=$(echo "$LINES/$SPEED+2" | bc)
    FMT="$TMP/%0${#framecount}d.png"
	  verbose "Tmp file FMT set to $FMT"
    verbose "Timeformat set to $TIMEFORMAT"
    verbose "Speed set to $SPEED"
    verbose "Point type is $TYPE"	
    local i
    local k
    local float

    i=1
    k=0
    float=1
    #count spaces, gnuplot uses them as separator
    formatspaces=$(echo "$TIMEFORMAT" | tr -cd ' ' | wc -c)
    #calculate gnuplot offset with respect to number of spaces in timeformat
    sepoffset=$(( formatspaces + 2 ))
    #x and X not supported by gnuplot, substitute them according to en_GB locale
    TIMEFORMAT="$(echo "$TIMEFORMAT" | sed -E -e 's#%x#%d.%m.%Y#' -e 's/%X/%H:%M:%S/'  )"
  #used to indicate if we already did the final step containing all data
  local complete;
  complete=0  
	while [ "$i" -le "$LINES" ]
	do
		{
			cat <<-PLOT
				set terminal png
        set timefmt "$TIMEFORMAT"
				set xdata time
        set yrange [$YRANGE]
        set xrange [$XRANGE]
        set format x"$TIMEFORMAT"
        set xtics rotate by -45
        set rmargin 15
        set grid
        set output "$(printf "$FMT" $k)"
				plot '-' using 1:$sepoffset with lines t '', "${TMP}/dots" using 1:$sepoffset w p pt ${TYPE} t '' 
				PLOT
			head -n $i "$DATA"
		} | gnuplot || err "Something went wrong with gnuplot"
		  
      
         float=$(echo "$float+$SPEED" | bc)
         i=$(echo "$float/1" | bc)
         k=$((k+1))
         vverbose "Frame $k generated!"     
      #if speed was setup so badly that we missed a lot of data this takes care of the one final frame which contains all data
      if [[ "$i" -gt "$LINES" ]]; then
        if [[ "$complete" -eq 0 ]]; then
         i="$LINES"
         complete=1
        fi
      fi
      
  done
  verbose "GNUPLOT done $k frames generated, ffmpeg comes into play"
	#create dir for output
  mkdir "$NAME" 2>/dev/null || max_folder "$NAME"
  #join frames to video using ffmpeg   
	if [[ -z "$TIME" ]]; then
        ffmpeg -y -i "$FMT" -- "${PWD}/${NAME}/${OUTPUT}" >/dev/null 2>/dev/null || err "Something went wrong with ffmpeg"
  else
        FPS=$(echo "$k/$TIME" | bc -l)
        verbose "Calculated FPS based on frames and time is $FPS"
        ffmpeg -framerate "$FPS" -y -i "$FMT" -- "${PWD}/${NAME}/${OUTPUT}" >/dev/null 2>/dev/null || err "Something went wrong with ffmpeg"
  fi
	verbose "Animation is ready ${PWD}/${NAME}/${OUTPUT}"

}


##############################
TMP=$(mktemp -d 2>/dev/null) || err "Cannot create temporary directory in /tmp"
trap 'rm -rf "$TMP" 2>/dev/null || err "Could not remove temporary directory"; exit $ECODE' EXIT

#check prequisites
preq
# options
OPTSTRING='vho:e:t:S:T:y:Y:n:f:'

declare -A used

# creating a temp dir
#looking for verbosity
while getopts "$OPTSTRING" opt
do
  case $opt in
     v) ((VERBOSE++));;
     \?) :;
  esac
done
OPTIND=1
#looking for config
while getopts "$OPTSTRING" opt
do
	case $opt in
	    f) 
           if [[ "${used[f]}" != 1 ]]; then
           used[f]=1
           CONFIG="$OPTARG" 
           load_config "$CONFIG"
           else
           err "-f used more than once "	
           fi;;
        \?) :;
	esac
done
OPTIND=1
#now load other options overwriting the ones loaded from config
while getopts "$OPTSTRING" opt
do
    case $opt in
        h) printf "%s\n" "$USAGE"; ECODE=0; exit ;;
        o) if [[ "${used[o]}" != 1 ]]; then
           used[o]=1
           OUTPUT="$OPTARG"
           else
           err "-o used more than once "	
           fi;;
        e) EFFECTPARAMS="$OPTARG"; parse_eparams "$EFFECTPARAMS";;
        t) if [[ "${used[t]}" != 1 ]]; then
           used[t]=1
           TIMEFORMAT="$OPTARG"
           else
           err "-t used more than once "	
           fi;;
        S) if [[ "${used[S]}" != 1 ]]; then
           used[S]=1
           SPEED="$OPTARG"
           else
           err "-S used more than once "	
           fi;;        
        T) if [[ "${used[T]}" != 1 ]]; then
           used[T]=1
           TIME="$OPTARG"
           else
           err "-T used more than once "	
           fi;;  
        y) if [[ "${used[y]}" != 1 ]]; then
           used[y]=1
           YMIN="$OPTARG"
           else
           err "-y used more than once "	
           fi;; 
        Y) if [[ "${used[Y]}" != 1 ]]; then
           used[Y]=1
           YMAX="$OPTARG"
           else
           err "-Y used more than once "	
           fi;; 
        n) if [[ "${used[n]}" != 1 ]]; then
           used[n]=1
           NAME="$OPTARG"
           else
           err "-n used more than once "	
           fi;; 
        \?) err "$USAGE";
    esac
done
shift $((OPTIND-1))

verbose "Options loaded"
verbose "Temp dir: $TMP"
#validate loaded parametres
validate_params
format_regex



verbose "Output name is $OUTPUT"

#at least one argument must be supplied
[ $# -ge 1 ] || err "Arguments missing" "${USAGE[@]}"


#loop all arguments
for arg
do
#if argu
if [[ "$arg" =~ ^http ]] && ! [ -f "$arg" ]; then
 verbose "Downloading $arg"
 max_file
 wget --quiet -O - "$arg" > "${TMP}/${TMPFILE}" || err "Download of $arg failed"
 process_arg "${TMP}/${TMPFILE}";
elif [[ "$arg" =~ [[:space:]] ]]; then
 verbose "Creating temporary copy of $arg, because its name contains spaces which makes AWK confused"
 max_file
 cp "$arg" "${TMP}/${TMPFILE}" || err "Something went wrong with copying to ${TMP}"
 process_arg "${TMP}/${TMPFILE}";	
else
 process_arg "$arg";
fi

done
#sort the files based on the first line
sort -n "${TMP}/unsorted" >"${TMP}/sorted" || err "Something went wrong when sorting before merge"


check_overlap

merge_input


video "${TMP}/merge"
verbose "Job is done!"
ECODE=0
